<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.simple.dao.CommentDao">

    <!-- 获取评论信息 -->
    <select id="getCommentById" parameterType="string" resultType="CommentDO">
        select * from sim_comment where id_comment = #{idComment}
    </select>
    
    <!-- 获取评论列表 -->
    <select id="listCommentsByIds" parameterType="list" resultType="CommentDO">
        select * from sim_comment where id_comment in
        <foreach collection="list" index="index" item="item" open="(" separator="," close=")">  
            #{item}  
        </foreach> 
    </select>
    
    <!-- 获取所有评论信息 -->
    <select id="listAllComments" parameterType="string" resultType="CommentDO">
        select * from sim_comment
    </select>
    
    <!-- 评论分页查询 -->
    <select id="pagingComments" parameterType="CommentDTO" resultType="CommentDTO">
        select c.id_comment,
               c.id_post,
               p.title,
               c.id_user,
               c.content,
               c.favor_num,
               c.order_no,
               c.status,
               c.created_by,
               c.created_date,
               c.updated_by,
               c.updated_date
          from sim_comment c 
          left join sim_category_comment cc on c.id_comment = cc.id_comment
          left join sim_post p on c.id_post = p.id_post
         where 1 = 1
         <!-- 分组ID -->
         <if test='idCategory != null and idCategory != "0"'>
            and find_in_set( cc.id_category, getCategoryChildList(#{idCategory}))
         </if>
         <!-- 关键字 -->
         <if test='keyWord != null'>
            and (c.content like concat('%',#{keyWord},'%')
         </if>
         <!-- 开始日期 -->
         <if test='startDate != null'>
            and date_format(c.created_date,'20%y-%m-%d') >= #{startDate} 
         </if>
         <!-- 结束日期 -->
         <if test='endDate != null'>
            and date_format(c.created_date,'20%y-%m-%d') >= #{endDate} 
         </if>
         <!-- 排序字段 -->
         <if test='sortName != null and sortOrder != null'>
            order by #{sortName} #{sortOrder}
         </if>
    </select>
    
    <!-- 统计评论数量 -->
    <select id="countCommentsBasedFuzzy" parameterType="string" resultType="Integer">
    	select count(*)
		  from sim_comment c
		 where date_format(c.created_date, '%Y%m%d') like
		       concat(#{accessDate}, '%')
    </select>
    
    <!-- 统计评论数量 -->
    <select id="countCommentsBasedAccurate" parameterType="list" resultType="Integer">
    	select count(*)
		  from sim_comment c
		 where date_format(c.created_date, '%Y%m%d') in
		 <foreach collection="list" index="index" item="item" open="(" separator="," close=")">  
	        #{item}  
	     </foreach>
    </select>
    
    <!-- 保存评论信息 -->
    <insert id="saveComment" parameterType="CommentDO">
    	<selectKey keyProperty="idComment" resultType="string" order="BEFORE">
           select replace(uuid(),'-','')
		</selectKey>
        insert into sim_comment
          (id_comment,
           id_post,
           id_user,
           content,
           favor_num,
           order_no,
           status,
           created_by,
           created_date,
           updated_by,
           updated_date)
        values
          (#{idComment},
           #{idPost},
           #{idUser},
           #{content},
           #{favorNum},
           #{orderNo},
           #{status},
           #{createdBy},
           sysdate(),
           #{updatedBy},
           sysdate())
    </insert>
    
    <!-- 更新评论信息 -->
    <update id="updateComment" parameterType="CommentDO">
        update sim_comment
           set id_post      = #{idPost},
               id_user      = #{idUser},
               content      = #{content},
               favor_num    = #{favorNum},
               order_no     = #{orderNo},
               status       = #{status},
               updated_by   = #{updatedBy},
               updated_date = sysdate()
         where id_comment = #{idComment}
    </update>
    
    <!-- 置顶评论信息 -->
    <update id="stickCommentById" parameterType="string">
        update sim_comment c,
		       (select max(order_no) + 1 maxOrderNo from sim_comment) b
		   set c.order_no = b.maxOrderNo
		 where id_comment = #{idComment}
    </update>
    
    <!-- 删除评论信息 -->
    <delete id="deleteComment" parameterType="string">
        delete from sim_comment where id_comment = #{idComment}
    </delete>
    
    <!-- 批量删除评论信息 -->
    <delete id="batchDeleteComments" parameterType="list">
        delete from sim_comment where id_comment in 
        <foreach collection="list" index="index" item="item" open="(" separator="," close=")">  
            #{item}  
        </foreach>
    </delete>
    
</mapper>